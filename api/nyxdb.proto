syntax = "proto3";

package nyxdb.api;

option go_package = "nyxdb/pkg/api";

message PutRequest {
  bytes key = 1;
  bytes value = 2;
}

message PutResponse {}

message GetRequest {
  bytes key = 1;
}

message GetResponse {
  bytes value = 1;
  bool found = 2;
}

message DeleteRequest {
  bytes key = 1;
}

message DeleteResponse {}

message BeginReadTxnRequest {}

message BeginReadTxnResponse {
  uint64 read_ts = 1;
  bytes handle = 2;
}

message ReadTxnGetRequest {
  bytes handle = 1;
  bytes key = 2;
}

message ReadTxnGetResponse {
  bytes value = 1;
  bool found = 2;
}

message EndReadTxnRequest {
  bytes handle = 1;
}

message EndReadTxnResponse {}

message JoinRequest {
  uint64 node_id = 1;
  string address = 2;
}

message JoinResponse {}

message LeaveRequest {
  uint64 node_id = 1;
}

message LeaveResponse {}

message MembersRequest {}

message Member {
  uint64 node_id = 1;
  string address = 2;
}

message MembersResponse {
  repeated Member members = 1;
}

message TriggerMergeRequest {
  bool force = 1;
}

message TriggerMergeResponse {}

message RaftMessage {
  uint64 to = 1;
  bytes message = 2;
}

message RaftAck {}

service RaftTransport {
  rpc Send(stream RaftMessage) returns (RaftAck);
}

service KV {
  rpc Put(PutRequest) returns (PutResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc BeginReadTxn(BeginReadTxnRequest) returns (BeginReadTxnResponse);
  rpc ReadTxnGet(ReadTxnGetRequest) returns (ReadTxnGetResponse);
  rpc EndReadTxn(EndReadTxnRequest) returns (EndReadTxnResponse);
}

service Admin {
  rpc Join(JoinRequest) returns (JoinResponse);
  rpc Leave(LeaveRequest) returns (LeaveResponse);
  rpc Members(MembersRequest) returns (MembersResponse);
  rpc TriggerMerge(TriggerMergeRequest) returns (TriggerMergeResponse);
}
