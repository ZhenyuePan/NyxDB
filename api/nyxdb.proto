syntax = "proto3";

package nyxdb.api;

option go_package = "nyxdb/pkg/api";

message PutRequest {
  bytes key = 1;
  bytes value = 2;
}

message PutResponse {}

message GetRequest {
  bytes key = 1;
}

message GetResponse {
  bytes value = 1;
  bool found = 2;
}

message DeleteRequest {
  bytes key = 1;
}

message DeleteResponse {}

message BeginReadTxnRequest {}

message BeginReadTxnResponse {
  uint64 read_ts = 1;
  bytes handle = 2;
}

message ReadTxnGetRequest {
  bytes handle = 1;
  bytes key = 2;
}

message ReadTxnGetResponse {
  bytes value = 1;
  bool found = 2;
}

message EndReadTxnRequest {
  bytes handle = 1;
}

message EndReadTxnResponse {}

message JoinRequest {
  uint64 node_id = 1;
  string address = 2;
}

message JoinResponse {}

message LeaveRequest {
  uint64 node_id = 1;
}

message LeaveResponse {}

message MembersRequest {}

message Member {
  uint64 node_id = 1;
  string address = 2;
}

message MembersResponse {
  repeated Member members = 1;
}

message TriggerMergeRequest {
  bool force = 1;
}

message TriggerMergeResponse {}

message TriggerSnapshotRequest {
  bool force = 1;
}

message TriggerSnapshotResponse {}

message SnapshotStatusRequest {}

message SnapshotStatusResponse {
  bool in_progress = 1;
  uint64 last_snapshot_index = 2;
  uint64 entries_since = 3;
  int64 last_snapshot_time_unix = 4;
  int64 in_progress_since_unix = 5;
  string leader = 6;
  uint64 applied_index = 7;
  uint64 last_raft_index = 8;
  int64 last_snapshot_duration_ms = 9;
  uint64 last_snapshot_size_bytes = 10;
}

enum RegionRole {
  REGION_ROLE_UNSPECIFIED = 0;
  REGION_ROLE_VOTER = 1;
  REGION_ROLE_LEARNER = 2;
}

enum RegionState {
  REGION_STATE_UNSPECIFIED = 0;
  REGION_STATE_ACTIVE = 1;
  REGION_STATE_SPLITTING = 2;
  REGION_STATE_MERGING = 3;
  REGION_STATE_TOMBSTONE = 4;
}

message RegionDescriptor {
  uint64 region_id = 1;
  bytes start_key = 2;
  bytes end_key = 3;
  uint64 version = 4;
  uint64 conf_version = 5;
  RegionState state = 6;
  uint64 leader_peer_id = 7;
}

message RegionReplicaDescriptor {
  uint64 region_id = 1;
  uint64 store_id = 2;
  RegionRole role = 3;
  uint64 applied_index = 4;
  RegionDescriptor region = 5;
  uint64 peer_id = 6;
}

message StoreHeartbeatProto {
  uint64 store_id = 1;
  string address = 2;
  repeated RegionReplicaDescriptor regions = 3;
  int64 timestamp_ms = 4;
}

message StoreHeartbeatRequest {
  StoreHeartbeatProto heartbeat = 1;
}

message StoreHeartbeatResponse {}

message ListStoresRequest {}

message ListStoresResponse {
  repeated StoreHeartbeatProto stores = 1;
}

message GetRegionByKeyRequest {
  bytes key = 1;
}

message GetRegionByKeyResponse {
  RegionDescriptor region = 1;
  repeated RegionReplicaDescriptor replicas = 2;
}

message SnapshotPayload {
  bytes backup = 1;
  uint64 next_commit_ts = 2;
}

message RaftMessage {
  uint64 region_id = 1;
  uint64 to_peer_id = 2;
  uint64 from_peer_id = 3;
  bytes message = 4;
}

message RaftAck {}

service RaftTransport {
  rpc Send(stream RaftMessage) returns (RaftAck);
}

service KV {
  rpc Put(PutRequest) returns (PutResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc BeginReadTxn(BeginReadTxnRequest) returns (BeginReadTxnResponse);
  rpc ReadTxnGet(ReadTxnGetRequest) returns (ReadTxnGetResponse);
  rpc EndReadTxn(EndReadTxnRequest) returns (EndReadTxnResponse);
}

service Admin {
  rpc Join(JoinRequest) returns (JoinResponse);
  rpc Leave(LeaveRequest) returns (LeaveResponse);
  rpc Members(MembersRequest) returns (MembersResponse);
  rpc TriggerMerge(TriggerMergeRequest) returns (TriggerMergeResponse);
  rpc TriggerSnapshot(TriggerSnapshotRequest) returns (TriggerSnapshotResponse);
  rpc SnapshotStatus(SnapshotStatusRequest) returns (SnapshotStatusResponse);
}

service PD {
  rpc StoreHeartbeat(StoreHeartbeatRequest) returns (StoreHeartbeatResponse);
  rpc ListStores(ListStoresRequest) returns (ListStoresResponse);
  rpc GetRegionByKey(GetRegionByKeyRequest) returns (GetRegionByKeyResponse);
}
