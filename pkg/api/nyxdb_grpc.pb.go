// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: nyxdb.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RaftTransport_Send_FullMethodName = "/nyxdb.api.RaftTransport/Send"
)

// RaftTransportClient is the client API for RaftTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftTransportClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (RaftTransport_SendClient, error)
}

type raftTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftTransportClient(cc grpc.ClientConnInterface) RaftTransportClient {
	return &raftTransportClient{cc}
}

func (c *raftTransportClient) Send(ctx context.Context, opts ...grpc.CallOption) (RaftTransport_SendClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RaftTransport_ServiceDesc.Streams[0], RaftTransport_Send_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &raftTransportSendClient{ClientStream: stream}
	return x, nil
}

type RaftTransport_SendClient interface {
	Send(*RaftMessage) error
	CloseAndRecv() (*RaftAck, error)
	grpc.ClientStream
}

type raftTransportSendClient struct {
	grpc.ClientStream
}

func (x *raftTransportSendClient) Send(m *RaftMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftTransportSendClient) CloseAndRecv() (*RaftAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RaftAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftTransportServer is the server API for RaftTransport service.
// All implementations must embed UnimplementedRaftTransportServer
// for forward compatibility
type RaftTransportServer interface {
	Send(RaftTransport_SendServer) error
	mustEmbedUnimplementedRaftTransportServer()
}

// UnimplementedRaftTransportServer must be embedded to have forward compatible implementations.
type UnimplementedRaftTransportServer struct {
}

func (UnimplementedRaftTransportServer) Send(RaftTransport_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedRaftTransportServer) mustEmbedUnimplementedRaftTransportServer() {}

// UnsafeRaftTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftTransportServer will
// result in compilation errors.
type UnsafeRaftTransportServer interface {
	mustEmbedUnimplementedRaftTransportServer()
}

func RegisterRaftTransportServer(s grpc.ServiceRegistrar, srv RaftTransportServer) {
	s.RegisterService(&RaftTransport_ServiceDesc, srv)
}

func _RaftTransport_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftTransportServer).Send(&raftTransportSendServer{ServerStream: stream})
}

type RaftTransport_SendServer interface {
	SendAndClose(*RaftAck) error
	Recv() (*RaftMessage, error)
	grpc.ServerStream
}

type raftTransportSendServer struct {
	grpc.ServerStream
}

func (x *raftTransportSendServer) SendAndClose(m *RaftAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftTransportSendServer) Recv() (*RaftMessage, error) {
	m := new(RaftMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftTransport_ServiceDesc is the grpc.ServiceDesc for RaftTransport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftTransport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nyxdb.api.RaftTransport",
	HandlerType: (*RaftTransportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _RaftTransport_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "nyxdb.proto",
}

const (
	KV_Put_FullMethodName          = "/nyxdb.api.KV/Put"
	KV_Get_FullMethodName          = "/nyxdb.api.KV/Get"
	KV_Delete_FullMethodName       = "/nyxdb.api.KV/Delete"
	KV_BeginReadTxn_FullMethodName = "/nyxdb.api.KV/BeginReadTxn"
	KV_ReadTxnGet_FullMethodName   = "/nyxdb.api.KV/ReadTxnGet"
	KV_EndReadTxn_FullMethodName   = "/nyxdb.api.KV/EndReadTxn"
)

// KVClient is the client API for KV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	BeginReadTxn(ctx context.Context, in *BeginReadTxnRequest, opts ...grpc.CallOption) (*BeginReadTxnResponse, error)
	ReadTxnGet(ctx context.Context, in *ReadTxnGetRequest, opts ...grpc.CallOption) (*ReadTxnGetResponse, error)
	EndReadTxn(ctx context.Context, in *EndReadTxnRequest, opts ...grpc.CallOption) (*EndReadTxnResponse, error)
}

type kVClient struct {
	cc grpc.ClientConnInterface
}

func NewKVClient(cc grpc.ClientConnInterface) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, KV_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, KV_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, KV_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) BeginReadTxn(ctx context.Context, in *BeginReadTxnRequest, opts ...grpc.CallOption) (*BeginReadTxnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeginReadTxnResponse)
	err := c.cc.Invoke(ctx, KV_BeginReadTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) ReadTxnGet(ctx context.Context, in *ReadTxnGetRequest, opts ...grpc.CallOption) (*ReadTxnGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadTxnGetResponse)
	err := c.cc.Invoke(ctx, KV_ReadTxnGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) EndReadTxn(ctx context.Context, in *EndReadTxnRequest, opts ...grpc.CallOption) (*EndReadTxnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndReadTxnResponse)
	err := c.cc.Invoke(ctx, KV_EndReadTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVServer is the server API for KV service.
// All implementations must embed UnimplementedKVServer
// for forward compatibility
type KVServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	BeginReadTxn(context.Context, *BeginReadTxnRequest) (*BeginReadTxnResponse, error)
	ReadTxnGet(context.Context, *ReadTxnGetRequest) (*ReadTxnGetResponse, error)
	EndReadTxn(context.Context, *EndReadTxnRequest) (*EndReadTxnResponse, error)
	mustEmbedUnimplementedKVServer()
}

// UnimplementedKVServer must be embedded to have forward compatible implementations.
type UnimplementedKVServer struct {
}

func (UnimplementedKVServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKVServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKVServer) BeginReadTxn(context.Context, *BeginReadTxnRequest) (*BeginReadTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginReadTxn not implemented")
}
func (UnimplementedKVServer) ReadTxnGet(context.Context, *ReadTxnGetRequest) (*ReadTxnGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTxnGet not implemented")
}
func (UnimplementedKVServer) EndReadTxn(context.Context, *EndReadTxnRequest) (*EndReadTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndReadTxn not implemented")
}
func (UnimplementedKVServer) mustEmbedUnimplementedKVServer() {}

// UnsafeKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVServer will
// result in compilation errors.
type UnsafeKVServer interface {
	mustEmbedUnimplementedKVServer()
}

func RegisterKVServer(s grpc.ServiceRegistrar, srv KVServer) {
	s.RegisterService(&KV_ServiceDesc, srv)
}

func _KV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_BeginReadTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginReadTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).BeginReadTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_BeginReadTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).BeginReadTxn(ctx, req.(*BeginReadTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_ReadTxnGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTxnGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).ReadTxnGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_ReadTxnGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).ReadTxnGet(ctx, req.(*ReadTxnGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_EndReadTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndReadTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).EndReadTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_EndReadTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).EndReadTxn(ctx, req.(*EndReadTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KV_ServiceDesc is the grpc.ServiceDesc for KV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nyxdb.api.KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KV_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KV_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KV_Delete_Handler,
		},
		{
			MethodName: "BeginReadTxn",
			Handler:    _KV_BeginReadTxn_Handler,
		},
		{
			MethodName: "ReadTxnGet",
			Handler:    _KV_ReadTxnGet_Handler,
		},
		{
			MethodName: "EndReadTxn",
			Handler:    _KV_EndReadTxn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nyxdb.proto",
}

const (
	Admin_Join_FullMethodName            = "/nyxdb.api.Admin/Join"
	Admin_Leave_FullMethodName           = "/nyxdb.api.Admin/Leave"
	Admin_Members_FullMethodName         = "/nyxdb.api.Admin/Members"
	Admin_TriggerMerge_FullMethodName    = "/nyxdb.api.Admin/TriggerMerge"
	Admin_TriggerSnapshot_FullMethodName = "/nyxdb.api.Admin/TriggerSnapshot"
	Admin_SnapshotStatus_FullMethodName  = "/nyxdb.api.Admin/SnapshotStatus"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
	TriggerMerge(ctx context.Context, in *TriggerMergeRequest, opts ...grpc.CallOption) (*TriggerMergeResponse, error)
	TriggerSnapshot(ctx context.Context, in *TriggerSnapshotRequest, opts ...grpc.CallOption) (*TriggerSnapshotResponse, error)
	SnapshotStatus(ctx context.Context, in *SnapshotStatusRequest, opts ...grpc.CallOption) (*SnapshotStatusResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, Admin_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, Admin_Leave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MembersResponse)
	err := c.cc.Invoke(ctx, Admin_Members_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) TriggerMerge(ctx context.Context, in *TriggerMergeRequest, opts ...grpc.CallOption) (*TriggerMergeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerMergeResponse)
	err := c.cc.Invoke(ctx, Admin_TriggerMerge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) TriggerSnapshot(ctx context.Context, in *TriggerSnapshotRequest, opts ...grpc.CallOption) (*TriggerSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerSnapshotResponse)
	err := c.cc.Invoke(ctx, Admin_TriggerSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SnapshotStatus(ctx context.Context, in *SnapshotStatusRequest, opts ...grpc.CallOption) (*SnapshotStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnapshotStatusResponse)
	err := c.cc.Invoke(ctx, Admin_SnapshotStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	Members(context.Context, *MembersRequest) (*MembersResponse, error)
	TriggerMerge(context.Context, *TriggerMergeRequest) (*TriggerMergeResponse, error)
	TriggerSnapshot(context.Context, *TriggerSnapshotRequest) (*TriggerSnapshotResponse, error)
	SnapshotStatus(context.Context, *SnapshotStatusRequest) (*SnapshotStatusResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedAdminServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedAdminServer) Members(context.Context, *MembersRequest) (*MembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedAdminServer) TriggerMerge(context.Context, *TriggerMergeRequest) (*TriggerMergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerMerge not implemented")
}
func (UnimplementedAdminServer) TriggerSnapshot(context.Context, *TriggerSnapshotRequest) (*TriggerSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSnapshot not implemented")
}
func (UnimplementedAdminServer) SnapshotStatus(context.Context, *SnapshotStatusRequest) (*SnapshotStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotStatus not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Members_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Members(ctx, req.(*MembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_TriggerMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).TriggerMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_TriggerMerge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).TriggerMerge(ctx, req.(*TriggerMergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_TriggerSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).TriggerSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_TriggerSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).TriggerSnapshot(ctx, req.(*TriggerSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SnapshotStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SnapshotStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SnapshotStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SnapshotStatus(ctx, req.(*SnapshotStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nyxdb.api.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Admin_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Admin_Leave_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Admin_Members_Handler,
		},
		{
			MethodName: "TriggerMerge",
			Handler:    _Admin_TriggerMerge_Handler,
		},
		{
			MethodName: "TriggerSnapshot",
			Handler:    _Admin_TriggerSnapshot_Handler,
		},
		{
			MethodName: "SnapshotStatus",
			Handler:    _Admin_SnapshotStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nyxdb.proto",
}

const (
	PD_StoreHeartbeat_FullMethodName    = "/nyxdb.api.PD/StoreHeartbeat"
	PD_RegisterRegion_FullMethodName    = "/nyxdb.api.PD/RegisterRegion"
	PD_UpdateRegion_FullMethodName      = "/nyxdb.api.PD/UpdateRegion"
	PD_ListStores_FullMethodName        = "/nyxdb.api.PD/ListStores"
	PD_GetRegionByKey_FullMethodName    = "/nyxdb.api.PD/GetRegionByKey"
	PD_GetRegion_FullMethodName         = "/nyxdb.api.PD/GetRegion"
	PD_ListRegions_FullMethodName       = "/nyxdb.api.PD/ListRegions"
	PD_GetRegionsByStore_FullMethodName = "/nyxdb.api.PD/GetRegionsByStore"
	PD_AllocateTimestamp_FullMethodName = "/nyxdb.api.PD/AllocateTimestamp"
)

// PDClient is the client API for PD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDClient interface {
	StoreHeartbeat(ctx context.Context, in *StoreHeartbeatRequest, opts ...grpc.CallOption) (*StoreHeartbeatResponse, error)
	RegisterRegion(ctx context.Context, in *RegisterRegionRequest, opts ...grpc.CallOption) (*RegisterRegionResponse, error)
	UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error)
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	GetRegionByKey(ctx context.Context, in *GetRegionByKeyRequest, opts ...grpc.CallOption) (*GetRegionByKeyResponse, error)
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error)
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	GetRegionsByStore(ctx context.Context, in *GetRegionsByStoreRequest, opts ...grpc.CallOption) (*GetRegionsByStoreResponse, error)
	AllocateTimestamp(ctx context.Context, in *AllocateTimestampRequest, opts ...grpc.CallOption) (*AllocateTimestampResponse, error)
}

type pDClient struct {
	cc grpc.ClientConnInterface
}

func NewPDClient(cc grpc.ClientConnInterface) PDClient {
	return &pDClient{cc}
}

func (c *pDClient) StoreHeartbeat(ctx context.Context, in *StoreHeartbeatRequest, opts ...grpc.CallOption) (*StoreHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreHeartbeatResponse)
	err := c.cc.Invoke(ctx, PD_StoreHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) RegisterRegion(ctx context.Context, in *RegisterRegionRequest, opts ...grpc.CallOption) (*RegisterRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterRegionResponse)
	err := c.cc.Invoke(ctx, PD_RegisterRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRegionResponse)
	err := c.cc.Invoke(ctx, PD_UpdateRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, PD_ListStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) GetRegionByKey(ctx context.Context, in *GetRegionByKeyRequest, opts ...grpc.CallOption) (*GetRegionByKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionByKeyResponse)
	err := c.cc.Invoke(ctx, PD_GetRegionByKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionResponse)
	err := c.cc.Invoke(ctx, PD_GetRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegionsResponse)
	err := c.cc.Invoke(ctx, PD_ListRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) GetRegionsByStore(ctx context.Context, in *GetRegionsByStoreRequest, opts ...grpc.CallOption) (*GetRegionsByStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionsByStoreResponse)
	err := c.cc.Invoke(ctx, PD_GetRegionsByStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDClient) AllocateTimestamp(ctx context.Context, in *AllocateTimestampRequest, opts ...grpc.CallOption) (*AllocateTimestampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateTimestampResponse)
	err := c.cc.Invoke(ctx, PD_AllocateTimestamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDServer is the server API for PD service.
// All implementations must embed UnimplementedPDServer
// for forward compatibility
type PDServer interface {
	StoreHeartbeat(context.Context, *StoreHeartbeatRequest) (*StoreHeartbeatResponse, error)
	RegisterRegion(context.Context, *RegisterRegionRequest) (*RegisterRegionResponse, error)
	UpdateRegion(context.Context, *UpdateRegionRequest) (*UpdateRegionResponse, error)
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	GetRegionByKey(context.Context, *GetRegionByKeyRequest) (*GetRegionByKeyResponse, error)
	GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error)
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	GetRegionsByStore(context.Context, *GetRegionsByStoreRequest) (*GetRegionsByStoreResponse, error)
	AllocateTimestamp(context.Context, *AllocateTimestampRequest) (*AllocateTimestampResponse, error)
	mustEmbedUnimplementedPDServer()
}

// UnimplementedPDServer must be embedded to have forward compatible implementations.
type UnimplementedPDServer struct {
}

func (UnimplementedPDServer) StoreHeartbeat(context.Context, *StoreHeartbeatRequest) (*StoreHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHeartbeat not implemented")
}
func (UnimplementedPDServer) RegisterRegion(context.Context, *RegisterRegionRequest) (*RegisterRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRegion not implemented")
}
func (UnimplementedPDServer) UpdateRegion(context.Context, *UpdateRegionRequest) (*UpdateRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegion not implemented")
}
func (UnimplementedPDServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedPDServer) GetRegionByKey(context.Context, *GetRegionByKeyRequest) (*GetRegionByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionByKey not implemented")
}
func (UnimplementedPDServer) GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedPDServer) ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegions not implemented")
}
func (UnimplementedPDServer) GetRegionsByStore(context.Context, *GetRegionsByStoreRequest) (*GetRegionsByStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionsByStore not implemented")
}
func (UnimplementedPDServer) AllocateTimestamp(context.Context, *AllocateTimestampRequest) (*AllocateTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateTimestamp not implemented")
}
func (UnimplementedPDServer) mustEmbedUnimplementedPDServer() {}

// UnsafePDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDServer will
// result in compilation errors.
type UnsafePDServer interface {
	mustEmbedUnimplementedPDServer()
}

func RegisterPDServer(s grpc.ServiceRegistrar, srv PDServer) {
	s.RegisterService(&PD_ServiceDesc, srv)
}

func _PD_StoreHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).StoreHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_StoreHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).StoreHeartbeat(ctx, req.(*StoreHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_RegisterRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).RegisterRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_RegisterRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).RegisterRegion(ctx, req.(*RegisterRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_UpdateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).UpdateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_UpdateRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).UpdateRegion(ctx, req.(*UpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_GetRegionByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).GetRegionByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_GetRegionByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).GetRegionByKey(ctx, req.(*GetRegionByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_GetRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_ListRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_GetRegionsByStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsByStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).GetRegionsByStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_GetRegionsByStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).GetRegionsByStore(ctx, req.(*GetRegionsByStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PD_AllocateTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServer).AllocateTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PD_AllocateTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServer).AllocateTimestamp(ctx, req.(*AllocateTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PD_ServiceDesc is the grpc.ServiceDesc for PD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nyxdb.api.PD",
	HandlerType: (*PDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreHeartbeat",
			Handler:    _PD_StoreHeartbeat_Handler,
		},
		{
			MethodName: "RegisterRegion",
			Handler:    _PD_RegisterRegion_Handler,
		},
		{
			MethodName: "UpdateRegion",
			Handler:    _PD_UpdateRegion_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _PD_ListStores_Handler,
		},
		{
			MethodName: "GetRegionByKey",
			Handler:    _PD_GetRegionByKey_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _PD_GetRegion_Handler,
		},
		{
			MethodName: "ListRegions",
			Handler:    _PD_ListRegions_Handler,
		},
		{
			MethodName: "GetRegionsByStore",
			Handler:    _PD_GetRegionsByStore_Handler,
		},
		{
			MethodName: "AllocateTimestamp",
			Handler:    _PD_AllocateTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nyxdb.proto",
}
